package de.jcup.dependagen.springboot;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import de.jcup.dependagen.Version;
import de.jcup.dependagen.model.DependaGenModel;
import de.jcup.dependagen.model.DependencyNode;
import de.jcup.dependagen.model.RootDependencyNode;

public class SpringBootGradleLibrariesSourceFileContentFactory {

	private static final String INDENTION = "     ";

	public String create(DependaGenModel model) {
		Map<String, DependencyNode> map = new TreeMap<>();
		StringBuilder sb = new StringBuilder();

		RootDependencyNode rootNode = model.getRootNode();
		for (DependencyNode node : rootNode.getDependencies()) {
			if ("org.springframework.boot".equals(node.getGroup())) {
				model.setComment("Next parts are dependencies used by Spring Boot v " + node.getVersion());
				break;
			}
		}

		append(map, rootNode);
		sb.append("ext {\n");
		sb.append("  spring_boot_dependency = [\n");
		sb.append("     // ").append(model.getComment()).append("\n");
		sb.append("     // You can use this information to use exact same library version inside\n");
		sb.append("     // your own libraries, where you have no spring boot dependency management\n");
		sb.append("     //\n");
		sb.append("     // Generated by dependagen "+Version.INSTANCE.getVersionString()+"\n");
		sb.append("     // (see https://github.com/de-jcup/dependagen)\n\n");

		createDependencies(map, sb);
		sb.append("  ],\n");
		sb.append("  spring_boot_dependency_version = [\n");
		createVersionsOfDependencies(map, sb);
		sb.append("  ]\n");
		sb.append("}");
		return sb.toString();
	}

	private void createDependencies(Map<String, DependencyNode> map, StringBuilder sb) {
		for (Iterator<String> kit = map.keySet().iterator(); kit.hasNext();) {
			String key = kit.next();
			DependencyNode node = map.get(key);
			sb.append(INDENTION);
			placer(sb, key + ":", 40);
			sb.append("'").append(node.getGroup()).append(":").append(node.getArtifact()).append(":")
					.append(node.getVersion()).append("'");
			if (kit.hasNext()) {
				sb.append(",");
			}
			sb.append("\n");

		}
	}

	private void createVersionsOfDependencies(Map<String, DependencyNode> map, StringBuilder sb) {
		for (Iterator<String> kit = map.keySet().iterator(); kit.hasNext();) {
			String key = kit.next();
			DependencyNode node = map.get(key);
			sb.append(INDENTION);
			placer(sb, key + ":", 40);
			sb.append("'").append(node.getVersion()).append("'");
			if (kit.hasNext()) {
				sb.append(",");
			}
			sb.append("\n");

		}
	}

	private void append(Map<String, DependencyNode> map, DependencyNode parent) {

		for (DependencyNode node : parent.getDependencies()) {
			String group = node.getGroup();
			if (group.indexOf("springframework") != -1) {
				if (group.indexOf(" org.springframework.boot") != -1) {
				}
				append(map, node);
			} else {
				String id = createLibraryId(node);
				map.put(id, node);
			}
		}

	}

	private String createLibraryId(DependencyNode node) {
		return node.getArtifact().toLowerCase().replaceAll("\\.", "_").replaceAll("-", "_");
	}

	private void placer(StringBuilder sb, String text, int fillUpToLength) {

		StringBuilder sb2 = new StringBuilder();
		sb2.append(text);
		while (fillUpToLength - sb2.length() > 0) {
			sb2.append(' ');
		}
		sb.append(sb2);
	}

}
